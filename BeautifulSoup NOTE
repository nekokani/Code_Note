from bs4 import BeautifulSoup


#基本元素
"""
Tag 标签
Name 标签名,格式:<tag>.name
Attributes 标签属性,格式:<tag>.attrs
NavigableString 标签内非属性字符串,格式:<tag>.string
Comment 标签内字符串的注释部分
"""

# 标签树下行遍历
"""
:.contents 获得所有子节点并且返回一个列表

:.children 子节点生成器，用于遍历子节点

:.descendants 子节点生成器，用于遍历子孙节点
"""

# 标签树上行遍历
"""
:.parent 返回节点的父标签，当没有父标签时，返回None
 
:.partens 父标签生成器，勇于遍历先辈节点
    soup = BeautifulSoup(html)
    for parent in soup.a.parents:
        if parent is None:
            return parent
        else:
            return (parent.name)

"""

# 处于同一个父标签下的平行遍历
"""
:.next_sibling 返回HTML文本顺序的下一个平行节点标签

:.previous_sibiling 返回HTML文本顺序的上一个平行节点标签

:.next_sibling 生成器，用于遍历HTML文本顺序的后续的平行节点标签

:.previous_sibiling 生成器，用于遍历HTML文本顺序的之前的平行节点标签

"""

"""
prettify() 增加HTML的可读性
"""

# 查找页面元素的方法
"""
#返回一个列表
.find_all(name, attrs, recursive, sting, **kwargs)
    :name 对应标签名称的检索字符串
    :attrs 对应标签属性的检索字符串
    :recursive 是否对子孙节点全部检索，默认值为TURE
    :string 对标签内容的检索字符串
#返回字符串类型
.find()

#返回一个列表,检查先辈节点
.find_parents()
#返回字符串类型
.find_parent()

#检查后续平行节点
.find_next_siblings()
.find_next_sibling()

#检查前序平行节点
.find_previous_siblings()
.find_previous_sibling()
"""
